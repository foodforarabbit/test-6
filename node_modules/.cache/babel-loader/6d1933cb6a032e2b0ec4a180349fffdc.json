{"ast":null,"code":"import { fromJS, Map, removeIn } from 'immutable';\nimport { DefaultActionTypes, UserFactory, TodoFactory } from '../actions/default';\nconst initialUsers = [UserFactory({\n  id: 1,\n  name: 'Ryan'\n}), UserFactory({\n  id: 2,\n  name: 'Sandy'\n}), UserFactory({\n  id: 3,\n  name: 'Sean'\n}), UserFactory({\n  id: 4,\n  name: 'Peter'\n})];\nconst initialTodos = [TodoFactory({\n  id: 1,\n  userId: 1,\n  title: 'Drink Water'\n})];\nconst INITIAL_STATE = fromJS({\n  lastUserId: initialUsers.length,\n  lastTodoId: initialTodos.length,\n  users: Map().withMutations(mutableMap => {\n    initialUsers.forEach(user => {\n      mutableMap.set(user.get('id'), user);\n    });\n  }),\n  todos: Map().withMutations(mutableMap => {\n    initialTodos.forEach(todo => {\n      mutableMap.set(todo.get('id'), todo);\n    });\n  })\n});\nexport const reducer = (state = INITIAL_STATE, action) => {\n  console.log('state', state);\n  console.log('action', action);\n\n  switch (action.type) {\n    case DefaultActionTypes.ADD_USER:\n      {\n        const lastUserId = state.get('lastUserId');\n        const _ref = action,\n              payload = _ref.payload;\n        const user = payload.user;\n\n        if (user.get('name') === '') {\n          console.debug('no name!');\n          return state;\n        }\n\n        const userId = lastUserId + 1;\n        return state.withMutations(mutableState => {\n          mutableState.set('lastUserId', userId);\n          mutableState.setIn(['users', userId], user.set('id', userId));\n        });\n      }\n\n    case DefaultActionTypes.DELETE_USER:\n      {\n        const _ref2 = action,\n              payload = _ref2.payload;\n        const userId = payload.userId;\n        let id = userId;\n        return state.withMutations(mutableState => {\n          removeIn(mutableState, ['users', id]);\n        });\n      }\n\n    case DefaultActionTypes.ADD_TODO:\n      {\n        const lastTodoId = state.get('lastTodoId');\n        const _ref3 = action,\n              payload = _ref3.payload;\n        const userId = payload.userId,\n              todo = payload.todo;\n\n        if (todo.get('title') === '') {\n          console.debug('no title!');\n          return state;\n        }\n\n        const todoId = lastTodoId + 1;\n        return state.withMutations(mutableState => {\n          mutableState.set('lastTodoId', todoId);\n          mutableState.setIn(['todos', todoId], todo.withMutations(mutableTodo => {\n            mutableTodo.set('id', todoId);\n            mutableTodo.set('userId', userId);\n          }));\n        });\n      }\n\n    case DefaultActionTypes.DELETE_TODO:\n      {\n        const _ref4 = action,\n              payload = _ref4.payload;\n        const todoId = payload.todoId;\n        console.log('DELETE_USER', payload);\n        let id = todoId;\n        return state.withMutations(mutableState => {\n          removeIn(mutableState, ['users', id]);\n        });\n      }\n\n    default:\n      return state;\n  }\n};\nexport default reducer;","map":{"version":3,"sources":["/Users/m5/allied-technical-test-5/test-6/src/reducers/default.ts"],"names":["fromJS","Map","removeIn","DefaultActionTypes","UserFactory","TodoFactory","initialUsers","id","name","initialTodos","userId","title","INITIAL_STATE","lastUserId","length","lastTodoId","users","withMutations","mutableMap","forEach","user","set","get","todos","todo","reducer","state","action","console","log","type","ADD_USER","payload","debug","mutableState","setIn","DELETE_USER","ADD_TODO","todoId","mutableTodo","DELETE_TODO"],"mappings":"AAAA,SACEA,MADF,EAGEC,GAHF,EAKEC,QALF,QAMO,WANP;AAWA,SACEC,kBADF,EAQEC,WARF,EASEC,WATF,QAUO,oBAVP;AAwBA,MAAMC,YAAY,GAAG,CACnBF,WAAW,CAAC;AACVG,EAAAA,EAAE,EAAE,CADM;AAEVC,EAAAA,IAAI,EAAE;AAFI,CAAD,CADQ,EAKnBJ,WAAW,CAAC;AACVG,EAAAA,EAAE,EAAE,CADM;AAEVC,EAAAA,IAAI,EAAE;AAFI,CAAD,CALQ,EASnBJ,WAAW,CAAC;AACVG,EAAAA,EAAE,EAAE,CADM;AAEVC,EAAAA,IAAI,EAAE;AAFI,CAAD,CATQ,EAanBJ,WAAW,CAAC;AACVG,EAAAA,EAAE,EAAE,CADM;AAEVC,EAAAA,IAAI,EAAE;AAFI,CAAD,CAbQ,CAArB;AAmBA,MAAMC,YAAY,GAAG,CACnBJ,WAAW,CAAC;AACVE,EAAAA,EAAE,EAAE,CADM;AAEVG,EAAAA,MAAM,EAAE,CAFE;AAGVC,EAAAA,KAAK,EAAE;AAHG,CAAD,CADQ,CAArB;AAOA,MAAMC,aAAa,GAAGZ,MAAM,CAAC;AAC3Ba,EAAAA,UAAU,EAAEP,YAAY,CAACQ,MADE;AAE3BC,EAAAA,UAAU,EAAEN,YAAY,CAACK,MAFE;AAG3BE,EAAAA,KAAK,EAAEf,GAAG,GAA0BgB,aAA7B,CAA4CC,UAAD,IAAgB;AAChEZ,IAAAA,YAAY,CAACa,OAAb,CAAsBC,IAAD,IAAU;AAC7BF,MAAAA,UAAU,CAACG,GAAX,CAAeD,IAAI,CAACE,GAAL,CAAS,IAAT,CAAf,EAA+BF,IAA/B;AACD,KAFD;AAGD,GAJM,CAHoB;AAQ3BG,EAAAA,KAAK,EAAEtB,GAAG,GAA0BgB,aAA7B,CAA4CC,UAAD,IAAgB;AAChET,IAAAA,YAAY,CAACU,OAAb,CAAsBK,IAAD,IAAU;AAC7BN,MAAAA,UAAU,CAACG,GAAX,CAAeG,IAAI,CAACF,GAAL,CAAS,IAAT,CAAf,EAA+BE,IAA/B;AACD,KAFD;AAGD,GAJM;AARoB,CAAD,CAA5B;AAeA,OAAO,MAAMC,OAAO,GAAG,CAACC,KAA4B,GAAGd,aAAhC,EAA+Ce,MAA/C,KAAmE;AACxFC,EAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBH,KAArB;AACAE,EAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAsBF,MAAtB;;AACA,UAAQA,MAAM,CAACG,IAAf;AAEE,SAAK3B,kBAAkB,CAAC4B,QAAxB;AAAkC;AAChC,cAAMlB,UAAU,GAAGa,KAAK,CAACJ,GAAN,CAAU,YAAV,CAAnB;AADgC,qBAI5BK,MAJ4B;AAAA,cAG9BK,OAH8B,QAG9BA,OAH8B;AAAA,cAM9BZ,IAN8B,GAO5BY,OAP4B,CAM9BZ,IAN8B;;AAShC,YAAIA,IAAI,CAACE,GAAL,CAAS,MAAT,MAAqB,EAAzB,EAA6B;AAC3BM,UAAAA,OAAO,CAACK,KAAR,CAAc,UAAd;AACA,iBAAOP,KAAP;AACD;;AAED,cAAMhB,MAAM,GAAGG,UAAU,GAAG,CAA5B;AACA,eAAOa,KAAK,CAACT,aAAN,CAAqBiB,YAAD,IAAkB;AAC3CA,UAAAA,YAAY,CAACb,GAAb,CAAiB,YAAjB,EAA+BX,MAA/B;AACAwB,UAAAA,YAAY,CAACC,KAAb,CACE,CAAC,OAAD,EAAUzB,MAAV,CADF,EAEEU,IAAI,CAACC,GAAL,CAAS,IAAT,EAAeX,MAAf,CAFF;AAID,SANM,CAAP;AAOD;;AAED,SAAKP,kBAAkB,CAACiC,WAAxB;AAAqC;AAAA,sBAG/BT,MAH+B;AAAA,cAEjCK,OAFiC,SAEjCA,OAFiC;AAAA,cAKjCtB,MALiC,GAM/BsB,OAN+B,CAKjCtB,MALiC;AAOnC,YAAIH,EAAE,GAAGG,MAAT;AACA,eAAOgB,KAAK,CAACT,aAAN,CAAqBiB,YAAD,IAAkB;AAC3ChC,UAAAA,QAAQ,CAACgC,YAAD,EAAe,CAAC,OAAD,EAAU3B,EAAV,CAAf,CAAR;AACD,SAFM,CAAP;AAGD;;AAED,SAAKJ,kBAAkB,CAACkC,QAAxB;AAAkC;AAChC,cAAMtB,UAAU,GAAGW,KAAK,CAACJ,GAAN,CAAU,YAAV,CAAnB;AADgC,sBAI5BK,MAJ4B;AAAA,cAG/BK,OAH+B,SAG/BA,OAH+B;AAAA,cAM/BtB,MAN+B,GAQ5BsB,OAR4B,CAM/BtB,MAN+B;AAAA,cAO/Bc,IAP+B,GAQ5BQ,OAR4B,CAO/BR,IAP+B;;AAUhC,YAAIA,IAAI,CAACF,GAAL,CAAS,OAAT,MAAsB,EAA1B,EAA8B;AAC5BM,UAAAA,OAAO,CAACK,KAAR,CAAc,WAAd;AACA,iBAAOP,KAAP;AACD;;AAED,cAAMY,MAAM,GAAGvB,UAAU,GAAG,CAA5B;AAEA,eAAOW,KAAK,CAACT,aAAN,CAAqBiB,YAAD,IAAkB;AAC3CA,UAAAA,YAAY,CAACb,GAAb,CAAiB,YAAjB,EAA+BiB,MAA/B;AACAJ,UAAAA,YAAY,CAACC,KAAb,CACE,CAAC,OAAD,EAAUG,MAAV,CADF,EAEEd,IAAI,CAACP,aAAL,CAAoBsB,WAAD,IAAiB;AAClCA,YAAAA,WAAW,CAAClB,GAAZ,CAAgB,IAAhB,EAAsBiB,MAAtB;AACAC,YAAAA,WAAW,CAAClB,GAAZ,CAAgB,QAAhB,EAA0BX,MAA1B;AACD,WAHD,CAFF;AAOD,SATM,CAAP;AAUD;;AAED,SAAKP,kBAAkB,CAACqC,WAAxB;AAAqC;AAAA,sBAG/Bb,MAH+B;AAAA,cAEjCK,OAFiC,SAEjCA,OAFiC;AAAA,cAKjCM,MALiC,GAM/BN,OAN+B,CAKjCM,MALiC;AAOnCV,QAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA2BG,OAA3B;AAEA,YAAIzB,EAAE,GAAG+B,MAAT;AACA,eAAOZ,KAAK,CAACT,aAAN,CAAqBiB,YAAD,IAAkB;AAC3ChC,UAAAA,QAAQ,CAACgC,YAAD,EAAe,CAAC,OAAD,EAAU3B,EAAV,CAAf,CAAR;AACD,SAFM,CAAP;AAGD;;AAED;AACE,aAAOmB,KAAP;AApFJ;AAsFD,CAzFM;AA2FP,eAAeD,OAAf","sourcesContent":["import {\n  fromJS,\n  Record,\n  Map,\n  List,\n  removeIn\n} from 'immutable';\nimport {\n  IAction,\n} from '../Interfaces';\n\nimport {\n  DefaultActionTypes,\n  ITodo,\n  AddTodoAction,\n  DeleteTodoAction,\n  IUser,\n  AddUserAction,\n  DeleteUserAction,\n  UserFactory,\n  TodoFactory,\n} from '../actions/default';\nimport { useScrollTrigger } from '@material-ui/core';\n\n// import {\n//   Settings,\n// } from '../../models';\n\nexport interface IReducerState {\n  lastUserId: number;\n  lastTodoId: number;\n  users: Map<number, Record<IUser>>;\n  todos: Map<number, Record<ITodo>>;\n}\n\nconst initialUsers = [\n  UserFactory({\n    id: 1,\n    name: 'Ryan',\n  }),\n  UserFactory({\n    id: 2,\n    name: 'Sandy',\n  }),\n  UserFactory({\n    id: 3,\n    name: 'Sean',\n  }),\n  UserFactory({\n    id: 4,\n    name: 'Peter',\n  }),\n]\n\nconst initialTodos = [\n  TodoFactory({\n    id: 1,\n    userId: 1,\n    title: 'Drink Water',\n  })\n]\nconst INITIAL_STATE = fromJS({\n  lastUserId: initialUsers.length,\n  lastTodoId: initialTodos.length,\n  users: Map<number, Record<IUser>>().withMutations((mutableMap) => {\n    initialUsers.forEach((user) => {\n      mutableMap.set(user.get('id'), user);\n    })\n  }),\n  todos: Map<number, Record<ITodo>>().withMutations((mutableMap) => {\n    initialTodos.forEach((todo) => {\n      mutableMap.set(todo.get('id'), todo);\n    })\n  }),\n});\n\nexport const reducer = (state: Record<IReducerState> = INITIAL_STATE, action: IAction) => {\n  console.log('state', state)\n  console.log('action', action)\n  switch (action.type) {\n\n    case DefaultActionTypes.ADD_USER: {\n      const lastUserId = state.get('lastUserId');\n      const {\n        payload,\n      } = action as AddUserAction;\n      const {\n        user,\n      } = payload;\n\n      if (user.get('name') === '') {\n        console.debug('no name!')\n        return state;\n      }\n\n      const userId = lastUserId + 1;\n      return state.withMutations((mutableState) => {\n        mutableState.set('lastUserId', userId);\n        mutableState.setIn(\n          ['users', userId],\n          user.set('id', userId),\n        );\n      })\n    }\n\n    case DefaultActionTypes.DELETE_USER: {\n      const {\n        payload,\n      } = action as DeleteUserAction;\n      const {\n        userId,\n      } = payload;\n      let id = userId\n      return state.withMutations((mutableState) => {\n        removeIn(mutableState, ['users', id])\n      })\n    }\n\n    case DefaultActionTypes.ADD_TODO: {\n      const lastTodoId = state.get('lastTodoId');\n      const {\n       payload,\n      } = action as AddTodoAction;\n      const {\n       userId,\n       todo,\n      } = payload;\n\n      if (todo.get('title') === '') {\n        console.debug('no title!')\n        return state;\n      }\n\n      const todoId = lastTodoId + 1;\n\n      return state.withMutations((mutableState) => {\n        mutableState.set('lastTodoId', todoId);\n        mutableState.setIn( \n          ['todos', todoId],\n          todo.withMutations((mutableTodo) => {\n            mutableTodo.set('id', todoId)\n            mutableTodo.set('userId', userId)\n          }),\n        );\n      });\n    }\n\n    case DefaultActionTypes.DELETE_TODO: {\n      const {\n        payload,\n      } = action as DeleteTodoAction;\n      const {\n        todoId,\n      } = payload;\n      console.log('DELETE_USER', payload)\n\n      let id = todoId\n      return state.withMutations((mutableState) => {\n        removeIn(mutableState, ['users', id])\n      })\n    }\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;\n"]},"metadata":{},"sourceType":"module"}