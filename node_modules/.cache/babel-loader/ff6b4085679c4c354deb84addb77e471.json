{"ast":null,"code":"import { fromJS, Map, List } from 'immutable';\nimport { DefaultActionTypes, UserFactory, TodoFactory } from '../actions/default'; // import {\n//   Settings,\n// } from '../../models';\n\nconst initialUsers = [UserFactory({\n  id: 1,\n  name: 'Ryan'\n}), UserFactory({\n  id: 2,\n  name: 'Sandy'\n}), UserFactory({\n  id: 3,\n  name: 'Sean'\n}), UserFactory({\n  id: 4,\n  name: 'Peter'\n})];\nconst initialTodos = [TodoFactory({\n  id: 1,\n  userId: 1,\n  title: 'Drink Water',\n  complete: false\n})];\nconst INITIAL_STATE = fromJS({\n  lastUserId: initialUsers.length,\n  lastTodoId: initialTodos.length,\n  lastSubTodoId: 0,\n  users: Map().withMutations(mutableMap => {\n    initialUsers.forEach(user => {\n      mutableMap.set(user.get('id'), user);\n    });\n  }),\n  todos: Map().withMutations(mutableMap => {\n    initialTodos.forEach(todo => {\n      mutableMap.set(todo.get('id'), todo);\n    });\n  })\n});\nexport const reducer = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n    case DefaultActionTypes.ADD_USER:\n      {\n        const lastUserId = state.get('lastUserId');\n        const _ref = action,\n              payload = _ref.payload;\n        const user = payload.user;\n\n        if (user.get('name') === '') {\n          console.debug('no name!');\n          return state;\n        }\n\n        const userId = lastUserId + 1;\n        return state.withMutations(mutableState => {\n          mutableState.set('lastUserId', userId);\n          mutableState.setIn(['users', userId], user.set('id', userId));\n        });\n      }\n\n    case DefaultActionTypes.DELETE_USER:\n      {\n        const _ref2 = action,\n              payload = _ref2.payload;\n        const userId = payload.userId;\n        return state.withMutations(map => {\n          console.log(map);\n          map.removeIn(['users', userId]).removeIn(['todos', userId]);\n        });\n      }\n\n    case DefaultActionTypes.ADD_TODO:\n      {\n        const lastTodoId = state.get('lastTodoId');\n        const _ref3 = action,\n              payload = _ref3.payload;\n        const userId = payload.userId,\n              todo = payload.todo;\n\n        if (todo.get('title') === '') {\n          console.debug('no title!');\n          return state;\n        }\n\n        const todoId = lastTodoId + 1;\n        return state.withMutations(mutableState => {\n          mutableState.set('lastTodoId', todoId);\n          mutableState.setIn(['todos', todoId], todo.withMutations(mutableTodo => {\n            mutableTodo.set('id', todoId);\n            mutableTodo.set('userId', userId);\n          }));\n        });\n      }\n\n    case DefaultActionTypes.ADD_SUB_TODO:\n      {\n        const lastSubTodoId = state.get('lastSubTodoId');\n        const _ref4 = action,\n              payload = _ref4.payload;\n        const subTodo = payload.subTodo,\n              todoId = payload.todoId;\n\n        if (subTodo.get('title') === '') {\n          console.debug('title!');\n          return state;\n        }\n\n        let subTodoId = lastSubTodoId + 1;\n        return state.withMutations(mutableState => {\n          mutableState.set('lastSubTodoId', subTodoId);\n          mutableState.setIn(['subTodo', subTodoId], subTodo.withMutations(mutableSubTodo => {\n            mutableSubTodo.set('todoId', todoId);\n            mutableSubTodo.set('id', subTodoId);\n            mutableSubTodo.set('subTodo', List(subTodo));\n          }));\n        });\n      }\n\n    case DefaultActionTypes.COMPLETE_TODO:\n      {\n        const _ref5 = action,\n              payload = _ref5.payload;\n        const todo = payload.todo,\n              complete = payload.complete;\n        let id = todo.get('id');\n        return state.withMutations(mutableState => {\n          mutableState.setIn(['todos', id], todo.withMutations(mutableTodo => {\n            mutableTodo.set('complete', !complete);\n          }));\n        });\n      }\n\n    case DefaultActionTypes.DELETE_TODO:\n      {\n        const _ref6 = action,\n              payload = _ref6.payload;\n        const todo = payload.todo;\n        return state.withMutations(map => {\n          let id = todo.get('id');\n          map.removeIn(['todos', id]);\n        });\n      }\n\n    default:\n      return state;\n  }\n};\nexport default reducer;","map":{"version":3,"sources":["/Users/m5/allied-technical-test-5/test-6/src/reducers/default.ts"],"names":["fromJS","Map","List","DefaultActionTypes","UserFactory","TodoFactory","initialUsers","id","name","initialTodos","userId","title","complete","INITIAL_STATE","lastUserId","length","lastTodoId","lastSubTodoId","users","withMutations","mutableMap","forEach","user","set","get","todos","todo","reducer","state","action","type","ADD_USER","payload","console","debug","mutableState","setIn","DELETE_USER","map","log","removeIn","ADD_TODO","todoId","mutableTodo","ADD_SUB_TODO","subTodo","subTodoId","mutableSubTodo","COMPLETE_TODO","DELETE_TODO"],"mappings":"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","sourcesContent":["import {\n  fromJS,\n  Record,\n  Map,\n  List,\n} from 'immutable';\nimport {\n  IAction,\n} from '../Interfaces';\n\nimport {\n  DefaultActionTypes,\n  ITodo,\n  AddTodoAction,\n  AddSubTodoAction,\n  DeleteTodoAction,\n  CompletedTodoAction,\n  IUser,\n  AddUserAction,\n  DeleteUserAction,\n  UserFactory,\n  TodoFactory\n} from '../actions/default';\n\n\n// import {\n//   Settings,\n// } from '../../models';\n\nexport interface IReducerState {\n  lastUserId: number;\n  lastTodoId: number;\n  lastSubTodoId: number;\n  users: Map<number, Record<IUser>>;\n  todos: Map<number, Record<ITodo>>;\n}\n\nconst initialUsers = [\n  UserFactory({\n    id: 1,\n    name: 'Ryan',\n  }),\n  UserFactory({\n    id: 2,\n    name: 'Sandy',\n  }),\n  UserFactory({\n    id: 3,\n    name: 'Sean',\n  }),\n  UserFactory({\n    id: 4,\n    name: 'Peter',\n  }),\n]\n\nconst initialTodos = [\n  TodoFactory({\n    id: 1,\n    userId: 1,\n    title: 'Drink Water',\n    complete: false,\n  })\n]\nconst INITIAL_STATE = fromJS({\n  lastUserId: initialUsers.length,\n  lastTodoId: initialTodos.length,\n  lastSubTodoId: 0,\n  users: Map<number, Record<IUser>>().withMutations((mutableMap) => {\n    initialUsers.forEach((user) => {\n      mutableMap.set(user.get('id'), user);\n    })\n  }),\n  todos: Map<number, Record<ITodo>>().withMutations((mutableMap) => {\n    initialTodos.forEach((todo) => {\n      mutableMap.set(todo.get('id'), todo);\n    })\n  }),\n});\n\nexport const reducer = (state: Record<IReducerState> = INITIAL_STATE, action: IAction) => {\n  switch (action.type) {\n    case DefaultActionTypes.ADD_USER: {\n      const lastUserId = state.get('lastUserId');\n      const {\n        payload,\n      } = action as AddUserAction;\n      const {\n        user,\n      } = payload;\n\n      if (user.get('name') === '') {\n        console.debug('no name!')\n        return state;\n      }\n\n      const userId = lastUserId + 1;\n      return state.withMutations((mutableState) => {\n        mutableState.set('lastUserId', userId);\n        mutableState.setIn(\n          ['users', userId],\n          user.set('id', userId),\n        );\n      })\n    }\n\n    case DefaultActionTypes.DELETE_USER: {\n      const {\n        payload,\n      } = action as DeleteUserAction;\n      const {\n        userId,\n      } = payload;\n\n      return state.withMutations((map) => {\n        console.log(map)\n        map\n          .removeIn(['users', userId])\n          .removeIn(['todos', userId])\n      });\n    }\n\n    case DefaultActionTypes.ADD_TODO: {\n      const lastTodoId = state.get('lastTodoId');\n      const {\n       payload,\n      } = action as AddTodoAction;\n      const {\n       userId,\n       todo,\n      } = payload;\n\n      if (todo.get('title') === '') {\n        console.debug('no title!')\n        return state;\n      }\n\n      const todoId = lastTodoId + 1;\n      return state.withMutations((mutableState) => {\n        mutableState.set('lastTodoId', todoId);\n        mutableState.setIn( \n          ['todos', todoId],\n          todo.withMutations((mutableTodo) => {\n            mutableTodo.set('id', todoId)\n            mutableTodo.set('userId', userId)\n          }),\n        );\n      });\n    }\n\n    case DefaultActionTypes.ADD_SUB_TODO: {\n      const lastSubTodoId = state.get('lastSubTodoId');\n      const {\n       payload,\n      } = action as AddSubTodoAction;\n      const { \n       subTodo,\n       todoId,\n      } = payload;\n      \n      if (subTodo.get('title') === '') {\n        console.debug('title!')\n        return state;\n      }\n\n      let subTodoId = lastSubTodoId + 1;\n      return state.withMutations((mutableState) => {\n        mutableState.set('lastSubTodoId', subTodoId);\n        mutableState.setIn( \n          ['subTodo', subTodoId],\n          subTodo.withMutations((mutableSubTodo: any) => {\n            mutableSubTodo.set('todoId', todoId)\n            mutableSubTodo.set('id', subTodoId)\n            mutableSubTodo.set('subTodo', List(subTodo))\n          }),     \n        );\n       });\n    }\n\n    case DefaultActionTypes.COMPLETE_TODO: {\n      const {\n        payload,\n      } = action as CompletedTodoAction;\n      const {\n        todo,\n        complete\n      } = payload;\n      let id = todo.get('id')\n      return state.withMutations((mutableState) => {\n        mutableState.setIn( \n        ['todos', id],\n        todo.withMutations((mutableTodo) => {\n          mutableTodo.set('complete', !complete)\n        }),\n      );\n      })\n    }\n\n    case DefaultActionTypes.DELETE_TODO: {\n      const {\n        payload,\n      } = action as DeleteTodoAction;\n      const {\n        todo,\n      } = payload;\n      return state.withMutations((map) => {\n        let id = todo.get('id')\n        map\n          .removeIn(['todos', id])\n      });\n    }\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;\n"]},"metadata":{},"sourceType":"module"}