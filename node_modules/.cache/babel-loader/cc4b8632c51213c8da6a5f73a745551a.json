{"ast":null,"code":"import _objectSpread from \"/Users/m5/allied-technical-test-5/test-6/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\n\n/**\n * Create the store with dynamic reducers\n */\nimport { createStore, applyMiddleware, compose } from 'redux';\nimport Immutable, { fromJS } from 'immutable';\nimport { routerMiddleware } from 'connected-react-router/immutable';\nimport createSagaMiddleware from 'redux-saga';\nimport createReducer, { configureReducer } from './reducers';\nimport { createBrowserHistory } from 'history';\nimport reduxClassActionMiddleware from './reduxClassActionMiddleware';\nexport const sagaMiddleware = createSagaMiddleware();\nexport default function configureStore({\n  initialState = {},\n  reducers,\n  history = createBrowserHistory(),\n  beforeMiddleware = [],\n  afterMiddleware = []\n} = {}) {\n  // Create the store with two middlewares\n  // 1. sagaMiddleware: Makes redux-sagas work\n  // 2. routerMiddleware: Syncs the location/URL path to the state\n  const middlewares = [...beforeMiddleware, reduxClassActionMiddleware, sagaMiddleware, routerMiddleware(history), ...afterMiddleware];\n  configureReducer({\n    history\n  });\n  const enhancers = [applyMiddleware(...middlewares)]; // If Redux DevTools Extension is installed use it, otherwise use Redux compose\n\n  const composeEnhancers = process.env.NODE_ENV !== 'production' && typeof window === 'object' && window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ ? window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({\n    immutable: Immutable,\n    shouldHotReload: false\n  }) : compose;\n  const store = createStore(createReducer(reducers), fromJS(initialState), composeEnhancers(...enhancers)); // Extensions\n\n  store.runSaga = sagaMiddleware.run;\n  store.injectedReducers = _objectSpread({}, reducers); // Reducer registry\n\n  store.injectedSagas = {}; // Saga registry\n  // Make reducers hot reloadable, see http://mxs.is/googmo\n\n  /* istanbul ignore next */\n\n  if (module.hot) {\n    module.hot.accept('./reducers', () => {\n      store.replaceReducer(createReducer(_objectSpread({}, store.injectedReducers)));\n    });\n  }\n\n  return store;\n}","map":{"version":3,"sources":["/Users/m5/allied-technical-test-5/test-6/src/configureStore.ts"],"names":["createStore","applyMiddleware","compose","Immutable","fromJS","routerMiddleware","createSagaMiddleware","createReducer","configureReducer","createBrowserHistory","reduxClassActionMiddleware","sagaMiddleware","configureStore","initialState","reducers","history","beforeMiddleware","afterMiddleware","middlewares","enhancers","composeEnhancers","process","env","NODE_ENV","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","immutable","shouldHotReload","store","runSaga","run","injectedReducers","injectedSagas","module","hot","accept","replaceReducer"],"mappings":";;AAAA;;;AAIA,SACEA,WADF,EAEEC,eAFF,EAGEC,OAHF,QAMO,OANP;AAOA,OAAOC,SAAP,IACEC,MADF,QAEO,WAFP;AAGA,SACEC,gBADF,QAEO,kCAFP;AAGA,OAAOC,oBAAP,MAAiC,YAAjC;AACA,OAAOC,aAAP,IACEC,gBADF,QAEO,YAFP;AAQA,SACEC,oBADF,QAGO,SAHP;AAKA,OAAOC,0BAAP,MAAuC,8BAAvC;AAEA,OAAO,MAAMC,cAAc,GAAGL,oBAAoB,EAA3C;AAoBP,eAAe,SAASM,cAAT,CAAwB;AACrCC,EAAAA,YAAY,GAAG,EADsB;AAErCC,EAAAA,QAFqC;AAGrCC,EAAAA,OAAO,GAAGN,oBAAoB,EAHO;AAIrCO,EAAAA,gBAAgB,GAAG,EAJkB;AAKrCC,EAAAA,eAAe,GAAG;AALmB,IAMX,EANb,EAMiB;AAC9B;AACA;AACA;AACA,QAAMC,WAAW,GAAG,CAClB,GAAGF,gBADe,EAElBN,0BAFkB,EAGlBC,cAHkB,EAIlBN,gBAAgB,CAACU,OAAD,CAJE,EAKlB,GAAGE,eALe,CAApB;AAQAT,EAAAA,gBAAgB,CAAC;AACfO,IAAAA;AADe,GAAD,CAAhB;AAIA,QAAMI,SAAS,GAAG,CAChBlB,eAAe,CAAC,GAAGiB,WAAJ,CADC,CAAlB,CAhB8B,CAoB9B;;AACA,QAAME,gBAAgB,GACpBC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,IACA,OAAOC,MAAP,KAAkB,QADlB,IAECA,MAAD,CAAgBC,oCAFhB,GAGGD,MAAD,CAAgBC,oCAAhB,CAAqD;AACnDC,IAAAA,SAAS,EAAEvB,SADwC;AAEnDwB,IAAAA,eAAe,EAAE;AAFkC,GAArD,CAHF,GAOEzB,OARJ;AAUA,QAAM0B,KAAe,GAAG5B,WAAW,CACjCO,aAAa,CAACO,QAAD,CADoB,EAEjCV,MAAM,CAACS,YAAD,CAF2B,EAGjCO,gBAAgB,CAAC,GAAGD,SAAJ,CAHiB,CAAnC,CA/B8B,CAqC9B;;AACAS,EAAAA,KAAK,CAACC,OAAN,GAAgBlB,cAAc,CAACmB,GAA/B;AACAF,EAAAA,KAAK,CAACG,gBAAN,qBACKjB,QADL,EAvC8B,CAyC3B;;AACHc,EAAAA,KAAK,CAACI,aAAN,GAAsB,EAAtB,CA1C8B,CA0CJ;AAE1B;;AACA;;AACA,MAAKC,MAAD,CAAgBC,GAApB,EAAyB;AACtBD,IAAAA,MAAD,CAAgBC,GAAhB,CAAoBC,MAApB,CAA2B,YAA3B,EAAyC,MAAM;AAC7CP,MAAAA,KAAK,CAACQ,cAAN,CAAqB7B,aAAa,mBAAKqB,KAAK,CAACG,gBAAX,EAAlC;AACD,KAFD;AAGD;;AAED,SAAOH,KAAP;AACD","sourcesContent":["/**\n * Create the store with dynamic reducers\n */\n\nimport {\n  createStore,\n  applyMiddleware,\n  compose,\n  Store,\n  Middleware,\n} from 'redux';\nimport Immutable, {\n  fromJS,\n} from 'immutable';\nimport {\n  routerMiddleware,\n} from 'connected-react-router/immutable';\nimport createSagaMiddleware from 'redux-saga';\nimport createReducer, {\n  configureReducer,\n} from './reducers';\nimport {\n  GenericReducer,\n  GenericSaga,\n  InjectedReducers,\n} from './Interfaces';\nimport {\n  createBrowserHistory,\n  History,\n} from 'history';\n\nimport reduxClassActionMiddleware from './reduxClassActionMiddleware';\n\nexport const sagaMiddleware = createSagaMiddleware();\n\nexport type AtsStore<S = any> = Store<S> & {\n  runSaga?: (saga: GenericSaga) => void;\n  injectedReducers?: {\n    [key: string]: GenericReducer;\n  }\n  injectedSagas?: {\n    [key: string]: GenericSaga;\n  }\n};\n\ninterface IConfigureStoreOptions {\n  initialState?: object;\n  history?: History;\n  reducers?: InjectedReducers;\n  beforeMiddleware?: Middleware[];\n  afterMiddleware?: Middleware[];\n}\n\nexport default function configureStore({\n  initialState = {},\n  reducers,\n  history = createBrowserHistory(),\n  beforeMiddleware = [],\n  afterMiddleware = [],\n}: IConfigureStoreOptions = {}) {\n  // Create the store with two middlewares\n  // 1. sagaMiddleware: Makes redux-sagas work\n  // 2. routerMiddleware: Syncs the location/URL path to the state\n  const middlewares = [\n    ...beforeMiddleware,\n    reduxClassActionMiddleware,\n    sagaMiddleware,\n    routerMiddleware(history),\n    ...afterMiddleware,\n  ];\n\n  configureReducer({\n    history,\n  });\n\n  const enhancers = [\n    applyMiddleware(...middlewares),\n  ];\n\n  // If Redux DevTools Extension is installed use it, otherwise use Redux compose\n  const composeEnhancers =\n    process.env.NODE_ENV !== 'production' &&\n    typeof window === 'object' &&\n    (window as any).__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ ?\n      (window as any).__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({\n        immutable: Immutable,\n        shouldHotReload: false,\n      }) :\n      compose;\n\n  const store: AtsStore = createStore(\n    createReducer(reducers),\n    fromJS(initialState),\n    composeEnhancers(...enhancers)\n  );\n\n  // Extensions\n  store.runSaga = sagaMiddleware.run;\n  store.injectedReducers = {\n    ...reducers,\n  }; // Reducer registry\n  store.injectedSagas = {}; // Saga registry\n\n  // Make reducers hot reloadable, see http://mxs.is/googmo\n  /* istanbul ignore next */\n  if ((module as any).hot) {\n    (module as any).hot.accept('./reducers', () => {\n      store.replaceReducer(createReducer({...store.injectedReducers}));\n    });\n  }\n\n  return store;\n}\n"]},"metadata":{},"sourceType":"module"}