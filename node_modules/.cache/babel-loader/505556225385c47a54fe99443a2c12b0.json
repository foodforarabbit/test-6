{"ast":null,"code":"import { createSelector } from 'reselect';\nimport { Map, List } from 'immutable';\nexport const selectReducerState = () => state => {\n  const reducerState = state.get('default');\n\n  if (reducerState != null) {\n    return reducerState;\n  }\n\n  return Map();\n};\nexport const makeSelectUsers = () => createSelector(selectReducerState(), state => state.get('users') || Map());\nexport const makeSelectUser = userId => createSelector(makeSelectUsers(), users => users.get(userId)); //\n\nexport const makeSelectSubTodos = todoId => createSelector(selectReducerState(), todos => todos.get(todoId)); //\n\nexport const makeSelectTodos = () => createSelector(selectReducerState(), state => state.get('todos') || Map());\nexport const makeSelectTodosForUser = userId => createSelector(makeSelectTodos(), todos => todos.filter(todo => todo.get('userId') === userId).toList() || List()); //\n\nexport const makeSelectSubTodosForTodo = todoId => createSelector(makeSelectSubTodos(), subTodos => subTodos.filter(subTodo => subTodo.get('userId') === todoId).toList() || List()); //\n\nexport default {\n  selectReducerState\n};","map":{"version":3,"sources":["/Users/m5/allied-technical-test-5/test-6/src/selectors/default.ts"],"names":["createSelector","Map","List","selectReducerState","state","reducerState","get","makeSelectUsers","makeSelectUser","userId","users","makeSelectSubTodos","todoId","todos","makeSelectTodos","makeSelectTodosForUser","filter","todo","toList","makeSelectSubTodosForTodo","subTodos","subTodo"],"mappings":"AAAA,SACEA,cADF,QAEO,UAFP;AAGA,SACEC,GADF,EAEEC,IAFF,QAIO,WAJP;AAcA,OAAO,MAAMC,kBAAkB,GAAG,MAAOC,KAAD,IAAgB;AACtD,QAAMC,YAAY,GAAGD,KAAK,CAACE,GAAN,CAAU,SAAV,CAArB;;AACA,MAAID,YAAY,IAAI,IAApB,EAA0B;AACxB,WAAOA,YAAP;AACD;;AACD,SAAOJ,GAAG,EAAV;AACD,CANM;AAQP,OAAO,MAAMM,eAAe,GAAG,MAAMP,cAAc,CACjDG,kBAAkB,EAD+B,EAEhDC,KAAD,IAAkCA,KAAK,CAACE,GAAN,CAAU,OAAV,KAAsBL,GAAG,EAFV,CAA5C;AAKP,OAAO,MAAMO,cAAc,GAAIC,MAAD,IAAoBT,cAAc,CAC9DO,eAAe,EAD+C,EAE7DG,KAAD,IAAWA,KAAK,CAACJ,GAAN,CAAUG,MAAV,CAFmD,CAAzD,C,CAIP;;AACA,OAAO,MAAME,kBAAkB,GAAIC,MAAD,IAAoBZ,cAAc,CAClEG,kBAAkB,EADgD,EAEjEU,KAAD,IAAWA,KAAK,CAACP,GAAN,CAAUM,MAAV,CAFuD,CAA7D,C,CAIP;;AACA,OAAO,MAAME,eAAe,GAAG,MAAMd,cAAc,CACjDG,kBAAkB,EAD+B,EAEhDC,KAAD,IAAkCA,KAAK,CAACE,GAAN,CAAU,OAAV,KAAsBL,GAAG,EAFV,CAA5C;AAKP,OAAO,MAAMc,sBAAsB,GAAIN,MAAD,IAAoBT,cAAc,CACtEc,eAAe,EADuD,EAErED,KAAD,IAAWA,KAAK,CAACG,MAAN,CAAaC,IAAI,IAAIA,IAAI,CAACX,GAAL,CAAS,QAAT,MAAuBG,MAA5C,EAAoDS,MAApD,MAAgEhB,IAAI,EAFT,CAAjE,C,CAIP;;AACA,OAAO,MAAMiB,yBAAyB,GAAIP,MAAD,IAAoBZ,cAAc,CACzEW,kBAAkB,EADuD,EAExES,QAAD,IAAcA,QAAQ,CAACJ,MAAT,CAAgBK,OAAO,IAAIA,OAAO,CAACf,GAAR,CAAY,QAAZ,MAA0BM,MAArD,EAA6DM,MAA7D,MAAyEhB,IAAI,EAFlB,CAApE,C,CAIP;;AACA,eAAe;AACbC,EAAAA;AADa,CAAf","sourcesContent":["import {\n  createSelector,\n} from 'reselect';\nimport {\n  Map,\n  List,\n  Record,\n} from 'immutable';\nimport {\n  IReducerState,\n} from '../reducers/default';\nimport {\n  ITodo,\n  IUser,\n  ISubTodo,\n} from '../actions/default';\n\nexport const selectReducerState = () => (state: any) => {\n  const reducerState = state.get('default');\n  if (reducerState != null) {\n    return reducerState;\n  }\n  return Map();\n};\n\nexport const makeSelectUsers = () => createSelector(\n  selectReducerState(),\n  (state: Record<IReducerState>) => state.get('users') || Map<number, Record<IUser>>(),\n);\n\nexport const makeSelectUser = (userId: number) => createSelector(\n  makeSelectUsers(),\n  (users) => users.get(userId),\n);\n//\nexport const makeSelectSubTodos = (todoId: number) => createSelector(\n  selectReducerState(),\n  (todos) => todos.get(todoId),\n);\n//\nexport const makeSelectTodos = () => createSelector(\n  selectReducerState(),\n  (state: Record<IReducerState>) => state.get('todos') || Map<number, Record<ITodo>>(),\n);\n\nexport const makeSelectTodosForUser = (userId: number) => createSelector(\n  makeSelectTodos(),\n  (todos) => todos.filter(todo => todo.get('userId') === userId).toList() || List<Record<ITodo>>(),\n);\n//\nexport const makeSelectSubTodosForTodo = (todoId: number) => createSelector(\n  makeSelectSubTodos(),\n  (subTodos) => subTodos.filter(subTodo => subTodo.get('userId') === todoId).toList() || List<Record<ISubTodo>>(),\n);\n//\nexport default {\n  selectReducerState,\n};\n"]},"metadata":{},"sourceType":"module"}