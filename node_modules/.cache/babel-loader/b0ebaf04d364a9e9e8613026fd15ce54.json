{"ast":null,"code":"import { createSelector } from 'reselect';\nimport { Map, List } from 'immutable';\nexport const selectReducerState = () => state => {\n  const reducerState = state.get('default');\n\n  if (reducerState != null) {\n    return reducerState;\n  }\n\n  return Map();\n};\nexport const makeSelectUsers = () => createSelector(selectReducerState(), state => state.get('users') || Map());\nexport const makeSelectUser = userId => createSelector(makeSelectUsers(), users => users.get(userId));\nexport const makeSelectSubTodos = () => createSelector(selectReducerState(), state => state.get('subTodos') || Map());\nexport const makeSelectTodos = () => createSelector(selectReducerState(), state => state.get('todos') || Map());\nexport const makeSelectTodosForUser = userId => createSelector(makeSelectTodos(), todos => todos.filter(todo => todo.get('userId') === userId).toList() || List());\nexport const makeSelectSubTodosForTodo = todoId => createSelector(makeSelectSubTodos(), subTodos => subTodos.filter(subTodo => subTodo.get('todoId') === todoId).toList() || List());\nexport default {\n  selectReducerState\n};","map":{"version":3,"sources":["/Users/m5/allied-technical-test-5/test-6/src/selectors/default.ts"],"names":["createSelector","Map","List","selectReducerState","state","reducerState","get","makeSelectUsers","makeSelectUser","userId","users","makeSelectSubTodos","makeSelectTodos","makeSelectTodosForUser","todos","filter","todo","toList","makeSelectSubTodosForTodo","todoId","subTodos","subTodo"],"mappings":"AAAA,SACEA,cADF,QAEO,UAFP;AAGA,SACEC,GADF,EAEEC,IAFF,QAIO,WAJP;AAcA,OAAO,MAAMC,kBAAkB,GAAG,MAAOC,KAAD,IAAgB;AACtD,QAAMC,YAAY,GAAGD,KAAK,CAACE,GAAN,CAAU,SAAV,CAArB;;AACA,MAAID,YAAY,IAAI,IAApB,EAA0B;AACxB,WAAOA,YAAP;AACD;;AACD,SAAOJ,GAAG,EAAV;AACD,CANM;AAQP,OAAO,MAAMM,eAAe,GAAG,MAAMP,cAAc,CACjDG,kBAAkB,EAD+B,EAEhDC,KAAD,IAAkCA,KAAK,CAACE,GAAN,CAAU,OAAV,KAAsBL,GAAG,EAFV,CAA5C;AAKP,OAAO,MAAMO,cAAc,GAAIC,MAAD,IAAoBT,cAAc,CAC9DO,eAAe,EAD+C,EAE7DG,KAAD,IAAWA,KAAK,CAACJ,GAAN,CAAUG,MAAV,CAFmD,CAAzD;AAKL,OAAO,MAAME,kBAAkB,GAAG,MAAMX,cAAc,CACpDG,kBAAkB,EADkC,EAEnDC,KAAD,IAAkCA,KAAK,CAACE,GAAN,CAAU,UAAV,KAAyBL,GAAG,EAFV,CAA/C;AAKT,OAAO,MAAMW,eAAe,GAAG,MAAMZ,cAAc,CACjDG,kBAAkB,EAD+B,EAEhDC,KAAD,IAAkCA,KAAK,CAACE,GAAN,CAAU,OAAV,KAAsBL,GAAG,EAFV,CAA5C;AAKP,OAAO,MAAMY,sBAAsB,GAAIJ,MAAD,IAAoBT,cAAc,CACtEY,eAAe,EADuD,EAErEE,KAAD,IAAWA,KAAK,CAACC,MAAN,CAAaC,IAAI,IAAIA,IAAI,CAACV,GAAL,CAAS,QAAT,MAAuBG,MAA5C,EAAoDQ,MAApD,MAAgEf,IAAI,EAFT,CAAjE;AAKP,OAAO,MAAMgB,yBAAyB,GAAIC,MAAD,IAAoBnB,cAAc,CACzEW,kBAAkB,EADuD,EAExES,QAAD,IAAcA,QAAQ,CAACL,MAAT,CAAgBM,OAAO,IAAIA,OAAO,CAACf,GAAR,CAAY,QAAZ,MAA0Ba,MAArD,EAA6DF,MAA7D,MAAyEf,IAAI,EAFlB,CAApE;AAKP,eAAe;AACbC,EAAAA;AADa,CAAf","sourcesContent":["import {\n  createSelector,\n} from 'reselect';\nimport {\n  Map,\n  List,\n  Record,\n} from 'immutable';\nimport {\n  IReducerState,\n} from '../reducers/default';\nimport {\n  ITodo,\n  IUser,\n  ISubTodo,\n} from '../actions/default';\n\nexport const selectReducerState = () => (state: any) => {\n  const reducerState = state.get('default');\n  if (reducerState != null) {\n    return reducerState;\n  }\n  return Map();\n};\n\nexport const makeSelectUsers = () => createSelector(\n  selectReducerState(),\n  (state: Record<IReducerState>) => state.get('users') || Map<number, Record<IUser>>(),\n);\n\nexport const makeSelectUser = (userId: number) => createSelector(\n  makeSelectUsers(),\n  (users) => users.get(userId),\n);\n\n  export const makeSelectSubTodos = () => createSelector(\n    selectReducerState(),\n    (state: Record<IReducerState>) => state.get('subTodos') || Map<number, Record<ISubTodo>>(),\n  );\n\nexport const makeSelectTodos = () => createSelector(\n  selectReducerState(),\n  (state: Record<IReducerState>) => state.get('todos') || Map<number, Record<ITodo>>(),\n);\n\nexport const makeSelectTodosForUser = (userId: number) => createSelector(\n  makeSelectTodos(),\n  (todos) => todos.filter(todo => todo.get('userId') === userId).toList() || List<Record<ITodo>>(),\n);\n\nexport const makeSelectSubTodosForTodo = (todoId: number) => createSelector(\n  makeSelectSubTodos(),\n  (subTodos) => subTodos.filter(subTodo => subTodo.get('todoId') === todoId).toList() || List<Record<ISubTodo>>(),\n);\n\nexport default {\n  selectReducerState,\n};\n"]},"metadata":{},"sourceType":"module"}