{"ast":null,"code":"import _objectSpread from \"/Users/m5/allied-technical-test-5/test-6/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _slicedToArray from \"/Users/m5/allied-technical-test-5/test-6/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/m5/allied-technical-test-5/test-6/src/pages/TodoUser/index.tsx\";\nimport React, { useState } from 'react';\nimport { compose, bindActionCreators } from 'redux';\nimport { getIn } from 'immutable';\nimport { connect } from 'react-redux';\nimport { Grid, Typography, Button, TextField, Checkbox } from '@material-ui/core';\nimport { AddTodoAction, DeleteTodoAction, CompletedTodoAction, AddSubTaskAction, TodoFactory, SubTaskFactory } from '../../actions/default';\nimport { makeSelectTodosForUser, makeSelectUser } from '../../selectors/default';\nimport { createStructuredSelector } from 'reselect';\n\nconst addTodo = (userId, todo) => new AddTodoAction({\n  userId,\n  todo\n});\n\nconst deleteTodo = todo => new DeleteTodoAction({\n  todo\n});\n\nconst completedTodo = (todo, complete) => new CompletedTodoAction({\n  todo,\n  complete\n});\n\nconst addSubTask = (todoId, subtask) => new AddSubTaskAction({\n  todoId,\n  subtask\n});\n\nconst Todo = props => {\n  const _useState = useState(''),\n        _useState2 = _slicedToArray(_useState, 2),\n        textInput = _useState2[0],\n        setTextInput = _useState2[1];\n\n  const _useState3 = useState(false),\n        _useState4 = _slicedToArray(_useState3, 2),\n        toggleAddInput = _useState4[0],\n        setToggleAddInput = _useState4[1];\n\n  const addTodo = props.addTodo,\n        deleteTodo = props.deleteTodo,\n        completedTodo = props.completedTodo,\n        addSubTask = props.addSubTask,\n        userId = props.userId,\n        todoId = props.todoId,\n        todosForUser = props.todosForUser,\n        user = props.user;\n  console.log('TodoUser', props);\n\n  if (user == null) {\n    return React.createElement(Grid, {\n      container: true,\n      direction: \"column\",\n      wrap: \"nowrap\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      item: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }, React.createElement(Typography, {\n      variant: \"h5\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    }, \"INVALID USER\")));\n  }\n\n  return React.createElement(Grid, {\n    container: true,\n    direction: \"column\",\n    wrap: \"nowrap\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95\n    },\n    __self: this\n  }, React.createElement(Grid, {\n    item: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100\n    },\n    __self: this\n  }, React.createElement(Typography, {\n    variant: \"h5\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103\n    },\n    __self: this\n  }, \"TODOS FOR \", user.get('name'))), React.createElement(Grid, {\n    container: true,\n    item: true,\n    direction: \"column\",\n    wrap: \"nowrap\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109\n    },\n    __self: this\n  }, false ? React.createElement(Grid, {\n    item: true,\n    container: true,\n    alignItems: \"center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116\n    },\n    __self: this\n  }, React.createElement(Grid, {\n    item: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121\n    },\n    __self: this\n  }, React.createElement(TextField, {\n    label: \"title\",\n    value: textInput,\n    onChange: e => {\n      setTextInput(e.target.value);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124\n    },\n    __self: this\n  })), React.createElement(Grid, {\n    item: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132\n    },\n    __self: this\n  }, React.createElement(Button, {\n    variant: \"outlined\",\n    onClick: () => {\n      addTodo(userId, TodoFactory({\n        title: textInput\n      }));\n      setTextInput('');\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135\n    },\n    __self: this\n  }, \"Add Todo\"))) : React.createElement(Grid, {\n    item: true,\n    container: true,\n    alignItems: \"center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155\n    },\n    __self: this\n  }, React.createElement(Grid, {\n    item: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160\n    },\n    __self: this\n  }, React.createElement(TextField, {\n    label: \"title\",\n    value: textInput,\n    onChange: e => {\n      setTextInput(e.target.value);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163\n    },\n    __self: this\n  })), React.createElement(Grid, {\n    item: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 171\n    },\n    __self: this\n  }, React.createElement(Button, {\n    variant: \"outlined\",\n    onClick: () => {\n      addSubTask(todoId, SubTaskFactory({\n        title: textInput\n      }));\n      setTextInput('');\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 174\n    },\n    __self: this\n  }, \"Add SubTask\"))), todosForUser.map((todo, index) => {\n    let complete = todo.get('complete');\n    return React.createElement(Grid, {\n      key: index,\n      item: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 196\n      },\n      __self: this\n    }, React.createElement(Checkbox, {\n      checked: complete,\n      value: complete,\n      onChange: () => completedTodo(todo, complete),\n      inputProps: {\n        'aria-label': 'primary checkbox'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200\n      },\n      __self: this\n    }), todo.get('title'), React.createElement(Button, {\n      variant: \"outlined\" //@ts-ignore       \n      ,\n      onClick: () => deleteTodo(todo),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 209\n      },\n      __self: this\n    }, \"Delete Todo\"), React.createElement(Button, {\n      variant: \"outlined\",\n      onClick: () => setToggleAddInput(true),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 215\n      },\n      __self: this\n    }, \"Add SubTask\"));\n  })));\n};\n\nconst mapStateToProps = (state, props) => {\n  const match = props.match;\n  const userId = parseInt(getIn(match, ['params', 'userId'], -1), 10); // from path / router\n\n  return _objectSpread({\n    userId\n  }, createStructuredSelector({\n    todosForUser: makeSelectTodosForUser(userId),\n    user: makeSelectUser(userId)\n  })(state));\n};\n\nconst mapDispatchToProps = dispatch => {\n  return _objectSpread({}, bindActionCreators({\n    addTodo,\n    deleteTodo,\n    completedTodo,\n    addSubTask\n  }, dispatch));\n};\n\nexport default compose(connect(mapStateToProps, mapDispatchToProps))(Todo);","map":{"version":3,"sources":["/Users/m5/allied-technical-test-5/test-6/src/pages/TodoUser/index.tsx"],"names":["React","useState","compose","bindActionCreators","getIn","connect","Grid","Typography","Button","TextField","Checkbox","AddTodoAction","DeleteTodoAction","CompletedTodoAction","AddSubTaskAction","TodoFactory","SubTaskFactory","makeSelectTodosForUser","makeSelectUser","createStructuredSelector","addTodo","userId","todo","deleteTodo","completedTodo","complete","addSubTask","todoId","subtask","Todo","props","textInput","setTextInput","toggleAddInput","setToggleAddInput","todosForUser","user","console","log","get","e","target","value","title","map","index","mapStateToProps","state","match","parseInt","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport {\n  compose,\n  bindActionCreators,\n  AnyAction,\n  Dispatch,\n} from 'redux';\nimport { IMatch } from '../../Interfaces';\nimport {\n  getIn,\n  Record,\n  List,\n} from 'immutable';\nimport { connect } from 'react-redux';\nimport {\n  Grid,\n  Typography,\n  Button,\n  TextField,\n  Checkbox\n} from '@material-ui/core';\nimport {\n  AddTodoAction,\n  DeleteTodoAction,\n  CompletedTodoAction,\n  AddSubTaskAction,\n  ITodo,\n  ISubTask,\n  TodoFactory,\n  SubTaskFactory,\n  IUser,\n} from '../../actions/default';\nimport {\n  makeSelectTodosForUser,\n  makeSelectUser,\n} from '../../selectors/default';\nimport { createStructuredSelector } from 'reselect';\n\ninterface ITodoComponentProps {\n  match: IMatch,\n}\n\ninterface ITodoProps extends ITodoComponentProps {\n  addTodo: (userId: number, todo: Record<ITodo>) => void;\n  addTodoSubTask: (todo: Record<ITodo>) => void;\n  deleteTodo: (todoId: number) => void;\n  completedTodo: (todo: Record<ITodo>, complete: boolean) => void;\n  addSubTask: (todoId: number, subtask: Record<ISubTask>) => void;\n  userId: number;\n  todoId: number;\n  todosForUser: List<Record<ITodo>>;\n  user?: Record<IUser>;\n}\n\nconst addTodo = (userId: number, todo: Record<ITodo>) => new AddTodoAction({ userId, todo });\nconst deleteTodo = (todo: Record<ITodo>) => new DeleteTodoAction({ todo });\nconst completedTodo = (todo: Record<ITodo>, complete: boolean) => new CompletedTodoAction({ todo, complete });\nconst addSubTask = (todoId: number, subtask: Record<ISubTask>) => new AddSubTaskAction({ todoId, subtask });\n\nconst Todo: React.FC<ITodoProps> = (props) => {\n  const [textInput, setTextInput] = useState('');\n  const [toggleAddInput, setToggleAddInput] = useState(false);\n\n  const {\n    addTodo,\n    deleteTodo,\n    completedTodo,\n    addSubTask,\n    userId,\n    todoId,\n    todosForUser,\n    user,\n  } = props;\n  console.log('TodoUser', props)\n  if (user == null) {\n    return (\n      <Grid\n        container={true}\n        direction='column'\n        wrap='nowrap'\n      >\n        <Grid\n          item={true}\n        >\n          <Typography\n            variant='h5'\n          >\n            INVALID USER\n          </Typography>\n        </Grid>\n      </Grid>\n    );\n  }\n  return (\n    <Grid\n      container={true}\n      direction='column'\n      wrap='nowrap'\n    >\n      <Grid\n        item={true}\n      >\n        <Typography\n          variant='h5'\n        >\n          TODOS FOR {user.get('name')}\n        </Typography>\n      </Grid>\n      <Grid\n        container={true}\n        item={true}\n        direction='column'\n        wrap='nowrap'\n      >\n      { false ?\n        <Grid\n          item={true}\n          container={true}\n          alignItems='center'\n        >\n          <Grid\n            item={true}\n          >\n            <TextField\n              label='title'\n              value={textInput}\n              onChange={(e) => {\n                setTextInput(e.target.value);\n              }}\n            />\n          </Grid>\n          <Grid\n            item={true}\n          >\n            <Button\n              variant='outlined'\n              onClick={\n                () => {\n                  addTodo(\n                    userId,\n                    TodoFactory({\n                      title: textInput,\n                    }),\n                  );\n                  setTextInput('');\n                }\n              }\n            >\n              Add Todo\n            </Button>\n          </Grid>\n  \n        </Grid>\n      :  \n        <Grid\n          item={true}\n          container={true}\n          alignItems='center'\n        >\n          <Grid\n            item={true}\n          >\n            <TextField\n              label='title'\n              value={textInput}\n              onChange={(e) => {\n                setTextInput(e.target.value);\n              }}\n            />\n          </Grid>\n          <Grid\n            item={true}\n          >\n            <Button\n              variant='outlined'\n              onClick={\n                () => {\n                  addSubTask(\n                    todoId,\n                    SubTaskFactory({\n                      title: textInput,\n                    }),\n                  );\n                  setTextInput('');\n                }\n              }\n            >\n              Add SubTask\n            </Button>\n          </Grid>\n          \n        </Grid>}\n        {\n          todosForUser.map((todo, index) => {\n            let complete = todo.get('complete')\n            return <Grid\n              key={index}\n              item={true}\n            >\n            <Checkbox\n                checked={complete}\n                value={complete}\n                onChange={() => completedTodo(todo, complete)}\n                inputProps={{\n                  'aria-label': 'primary checkbox',\n                }}\n              />\n              {todo.get('title')}\n              <Button  \n                variant='outlined'\n                //@ts-ignore       \n                onClick={() => deleteTodo(todo)}>            \n                Delete Todo\n              </Button> \n              <Button  \n                variant='outlined'      \n                onClick={() => setToggleAddInput(true)}\n                >            \n                Add SubTask\n              </Button> \n            </Grid>;\n          })\n        }\n      </Grid>\n    </Grid>\n  );\n}\n\nconst mapStateToProps = (state: any, props: ITodoComponentProps) => {\n  const {\n    match,\n  } = props;\n  const userId = parseInt(getIn(match, ['params', 'userId'], -1), 10); // from path / router\n  return {\n    userId,\n    ...createStructuredSelector({\n      todosForUser: makeSelectTodosForUser(userId),\n      user: makeSelectUser(userId),\n    })(state)\n  }\n};\n\nconst mapDispatchToProps = (dispatch: Dispatch<AnyAction>) => {\n  return {\n    ...bindActionCreators({ addTodo, deleteTodo, completedTodo, addSubTask }, dispatch)\n  };\n};\n\n\nexport default compose<React.ComponentClass<ITodoComponentProps>>(\n  connect(mapStateToProps, mapDispatchToProps)\n)(Todo);"]},"metadata":{},"sourceType":"module"}