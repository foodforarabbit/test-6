{"ast":null,"code":"import _objectSpread from \"/Users/m5/allied-technical-test-5/test-6/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _slicedToArray from \"/Users/m5/allied-technical-test-5/test-6/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/m5/allied-technical-test-5/test-6/src/pages/UserList/index.tsx\";\nimport React, { useState } from 'react';\nimport { compose, bindActionCreators } from 'redux';\nimport { connect } from 'react-redux';\nimport { Grid, Typography, Button, TextField } from '@material-ui/core';\nimport { AddUserAction, UpdateUserAction, DeleteUserAction, UserFactory } from '../../actions/default';\nimport { makeSelectUsers } from '../../selectors/default';\nimport { createStructuredSelector } from 'reselect';\nimport { Link } from 'react-router-dom';\n\nconst addUser = user => new AddUserAction({\n  user\n});\n\nconst updateUser = userId => new UpdateUserAction({\n  userId\n});\n\nconst deleteUser = userId => new DeleteUserAction({\n  userId\n});\n\nconst UserList = props => {\n  const _useState = useState(''),\n        _useState2 = _slicedToArray(_useState, 2),\n        textInput = _useState2[0],\n        setTextInput = _useState2[1];\n\n  const addUser = props.addUser,\n        updateUser = props.updateUser,\n        deleteUser = props.deleteUser,\n        users = props.users;\n  return React.createElement(Grid, {\n    container: true,\n    direction: \"column\",\n    wrap: \"nowrap\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49\n    },\n    __self: this\n  }, React.createElement(Grid, {\n    item: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54\n    },\n    __self: this\n  }, React.createElement(Typography, {\n    variant: \"h5\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57\n    },\n    __self: this\n  }, \"Users\")), React.createElement(Grid, {\n    container: true,\n    item: true,\n    direction: \"column\",\n    wrap: \"nowrap\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63\n    },\n    __self: this\n  }, React.createElement(Grid, {\n    item: true,\n    container: true,\n    alignItems: \"center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69\n    },\n    __self: this\n  }, React.createElement(Grid, {\n    item: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74\n    },\n    __self: this\n  }, React.createElement(TextField, {\n    label: \"name\",\n    value: textInput,\n    onChange: e => {\n      setTextInput(e.target.value);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77\n    },\n    __self: this\n  })), React.createElement(Grid, {\n    item: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85\n    },\n    __self: this\n  }, React.createElement(Button, {\n    variant: \"outlined\",\n    onClick: () => {\n      addUser(UserFactory({\n        name: textInput\n      }));\n      setTextInput('');\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88\n    },\n    __self: this\n  }, \"Add User\"))), users.map((user, userId) => {\n    return React.createElement(Grid, {\n      spacing: 1,\n      container: true,\n      key: userId,\n      item: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      item: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113\n      },\n      __self: this\n    }, React.createElement(Typography, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    }, userId, \":\")), React.createElement(Grid, {\n      item: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120\n      },\n      __self: this\n    }, React.createElement(Typography, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    }, user.get('name'))), React.createElement(Grid, {\n      item: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127\n      },\n      __self: this\n    }, React.createElement(Link, {\n      to: \"/todo/\".concat(userId),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130\n      },\n      __self: this\n    }, React.createElement(Typography, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133\n      },\n      __self: this\n    }, \"todos\"))), React.createElement(Grid, {\n      item: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138\n      },\n      __self: this\n    }, React.createElement(Button, {\n      onClick: () => {\n        // @ts-ignore\n        updateUser(userId);\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141\n      },\n      __self: this\n    }, \"Update User\")), React.createElement(Grid, {\n      item: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152\n      },\n      __self: this\n    }, React.createElement(Button, {\n      onClick: () => {\n        // @ts-ignore\n        deleteUser(userId);\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155\n      },\n      __self: this\n    }, \"Delete User\")));\n  }).valueSeq().toArray()));\n};\n\nconst mapStateToProps = createStructuredSelector({\n  users: makeSelectUsers()\n});\n\nconst mapDispatchToProps = dispatch => {\n  return _objectSpread({}, bindActionCreators({\n    addUser,\n    deleteUser\n  }, dispatch));\n};\n\nexport default compose(connect(mapStateToProps, mapDispatchToProps))(UserList);","map":{"version":3,"sources":["/Users/m5/allied-technical-test-5/test-6/src/pages/UserList/index.tsx"],"names":["React","useState","compose","bindActionCreators","connect","Grid","Typography","Button","TextField","AddUserAction","UpdateUserAction","DeleteUserAction","UserFactory","makeSelectUsers","createStructuredSelector","Link","addUser","user","updateUser","userId","deleteUser","UserList","props","textInput","setTextInput","users","e","target","value","name","map","get","valueSeq","toArray","mapStateToProps","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport { compose, bindActionCreators, AnyAction, Dispatch } from 'redux';\nimport { IMatch } from '../../Interfaces';\nimport {\n  Record,\n  Map,\n} from 'immutable';\nimport { connect } from 'react-redux';\nimport { Grid, Typography, Button, TextField } from '@material-ui/core';\nimport {\n  AddUserAction,\n  UpdateUserAction,\n  DeleteUserAction,\n  IUser,\n  UserFactory,\n} from '../../actions/default';\nimport {\n  makeSelectUsers,\n} from '../../selectors/default';\nimport { createStructuredSelector } from 'reselect';\nimport { Link } from 'react-router-dom';\n\ninterface IUserListComponentProps {\n  match: IMatch,\n}\n\ninterface IUserListProps extends IUserListComponentProps {\n  addUser: (user: Record<IUser>) => void;\n  updateUser: (userId: Record<IUser>) => void;\n  deleteUser: (userId: Record<IUser>) => void;\n  users: Map<number, Record<IUser>>;\n}\n\nconst addUser = (user: Record<IUser>) => new AddUserAction({ user });\nconst updateUser = (userId: Record<IUser>) => new UpdateUserAction({ userId });\nconst deleteUser = (userId: Record<IUser>) => new DeleteUserAction({ userId });\n\nconst UserList: React.FC<IUserListProps> = (props) => {\n  const [textInput, setTextInput] = useState('');\n\n  const {\n    addUser,\n    updateUser,\n    deleteUser,\n    users,\n  } = props;\n\n  return (\n    <Grid\n      container={true}\n      direction='column'\n      wrap='nowrap'\n    >\n      <Grid\n        item={true}\n      >\n        <Typography\n          variant='h5'\n        >\n          Users\n        </Typography>\n      </Grid>\n      <Grid\n        container={true}\n        item={true}\n        direction='column'\n        wrap='nowrap'\n      >\n        <Grid\n          item={true}\n          container={true}\n          alignItems='center'\n        >\n          <Grid\n            item={true}\n          >\n            <TextField\n              label='name'\n              value={textInput}\n              onChange={(e) => {\n                setTextInput(e.target.value);\n              }}\n            />\n          </Grid>\n          <Grid\n            item={true}\n          >\n            <Button\n              variant='outlined'\n              onClick={\n                () => {\n                  addUser(\n                    UserFactory({\n                      name: textInput,\n                    }),\n                  );\n                  setTextInput('');\n                }\n              }\n            >\n              Add User\n            </Button>\n          </Grid>\n        </Grid>\n        {\n          users.map((user, userId) => {\n            return <Grid\n              spacing={1}\n              container={true}\n              key={userId}\n              item={true}\n            >\n              <Grid\n                item={true}\n              >\n                <Typography>\n                  {userId}:\n                </Typography>\n              </Grid>\n              <Grid\n                item={true}\n              >\n                <Typography>\n                  {user.get('name')}\n                </Typography>\n              </Grid>\n              <Grid\n                item={true}\n              >\n                <Link\n                  to={`/todo/${userId}`}\n                >\n                  <Typography>\n                    todos\n                  </Typography>\n                </Link>\n              </Grid>\n              <Grid\n                item={true}\n              >\n                  <Button             \n                      onClick={\n                    () => {\n                      // @ts-ignore\n                      updateUser(userId);\n                    }\n                  }>\n                    Update User\n                  </Button>\n\n              </Grid>\n              <Grid\n                item={true}\n              >\n                  <Button             \n                      onClick={\n                    () => {\n                      // @ts-ignore\n                      deleteUser(userId);\n                    }\n                  }>\n                    Delete User\n                  </Button>\n\n              </Grid>\n            </Grid>;\n          }).valueSeq().toArray()\n        }\n      </Grid>\n    </Grid>\n  );\n}\n\nconst mapStateToProps = createStructuredSelector({\n  users: makeSelectUsers(),\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch<AnyAction>) => {\n  return {\n    ...bindActionCreators({ addUser, deleteUser }, dispatch)\n  };\n};\n\n\nexport default compose<React.ComponentClass<IUserListComponentProps>>(\n  connect(mapStateToProps, mapDispatchToProps)\n)(UserList);"]},"metadata":{},"sourceType":"module"}