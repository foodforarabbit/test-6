{"ast":null,"code":"import _objectSpread from \"/Users/m5/allied-technical-test-5/test-6/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\n\nfunction parseJSON(response) {\n  const ret = response;\n  const validResponse = response.status >= 200 && response.status < 300;\n\n  try {\n    return response.json();\n  } catch (e) {\n    console.error('could not parse response', e); // eslint-disable-line no-console\n  }\n\n  if (!validResponse) {\n    throw ret;\n  }\n}\n\nexport default function request(_url, _options = {}) {\n  const defaultHeaders = {\n    Accept: 'application/json',\n    'Content-Type': 'application/json'\n  };\n\n  const options = _objectSpread({}, _options);\n\n  const url = _url;\n  options.headers = _objectSpread({}, defaultHeaders, options.headers);\n  return fetch(url, options).then(parseJSON);\n}","map":{"version":3,"sources":["/Users/m5/allied-technical-test-5/test-6/src/utils.ts"],"names":["parseJSON","response","ret","validResponse","status","json","e","console","error","request","_url","_options","defaultHeaders","Accept","options","url","headers","fetch","then"],"mappings":";;AACA,SAASA,SAAT,CAAmBC,QAAnB,EAAuC;AACrC,QAAMC,GAAG,GAAGD,QAAZ;AAEA,QAAME,aAAa,GAAGF,QAAQ,CAACG,MAAT,IAAmB,GAAnB,IAA0BH,QAAQ,CAACG,MAAT,GAAkB,GAAlE;;AAEA,MAAI;AACF,WAAOH,QAAQ,CAACI,IAAT,EAAP;AACD,GAFD,CAEE,OAAOC,CAAP,EAAU;AACVC,IAAAA,OAAO,CAACC,KAAR,CAAc,0BAAd,EAA0CF,CAA1C,EADU,CACoC;AAC/C;;AACD,MAAI,CAACH,aAAL,EAAoB;AAClB,UAAMD,GAAN;AACD;AACF;;AAED,eAAe,SAASO,OAAT,CAAiBC,IAAjB,EAA+BC,QAAqB,GAAG,EAAvD,EAA2D;AACxE,QAAMC,cAAc,GAAG;AACrBC,IAAAA,MAAM,EAAE,kBADa;AAErB,oBAAgB;AAFK,GAAvB;;AAKA,QAAMC,OAAO,qBACRH,QADQ,CAAb;;AAIA,QAAMI,GAAG,GAAGL,IAAZ;AAEAI,EAAAA,OAAO,CAACE,OAAR,qBACKJ,cADL,EAEKE,OAAO,CAACE,OAFb;AAKA,SAAOC,KAAK,CAACF,GAAD,EAAMD,OAAN,CAAL,CACJI,IADI,CACClB,SADD,CAAP;AAED","sourcesContent":["\nfunction parseJSON(response: Response) {\n  const ret = response;\n\n  const validResponse = response.status >= 200 && response.status < 300;\n\n  try {\n    return response.json();\n  } catch (e) {\n    console.error('could not parse response', e); // eslint-disable-line no-console\n  }\n  if (!validResponse) {\n    throw ret;\n  }\n}\n\nexport default function request(_url: string, _options: RequestInit = {}) {\n  const defaultHeaders = {\n    Accept: 'application/json',\n    'Content-Type': 'application/json',\n  };\n\n  const options = {\n    ..._options,\n  };\n\n  const url = _url;\n\n  options.headers = {\n    ...defaultHeaders,\n    ...options.headers,\n  };\n\n  return fetch(url, options)\n    .then(parseJSON);\n}\n\n"]},"metadata":{},"sourceType":"module"}