{"ast":null,"code":"import { fromJS, Map, List } from 'immutable';\nimport { DefaultActionTypes, UserFactory, TodoFactory } from '../actions/default'; // import {\n//   Settings,\n// } from '../../models';\n\nconst initialUsers = [UserFactory({\n  id: 1,\n  name: 'Ryan'\n}), UserFactory({\n  id: 2,\n  name: 'Sandy'\n}), UserFactory({\n  id: 3,\n  name: 'Sean'\n}), UserFactory({\n  id: 4,\n  name: 'Peter'\n})];\nconst initialTodos = [TodoFactory({\n  id: 1,\n  userId: 1,\n  title: 'Drink Water'\n})];\nconst INITIAL_STATE = fromJS({\n  lastUserId: initialUsers.length,\n  lastTodoId: initialTodos.length,\n  users: Map().withMutations(mutableMap => {\n    initialUsers.forEach(user => {\n      mutableMap.set(user.get('id'), user);\n    });\n  }),\n  todos: Map().withMutations(mutableMap => {\n    initialTodos.forEach(todo => {\n      mutableMap.set(todo.get('id'), todo);\n    });\n  })\n});\nexport const reducer = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n    case DefaultActionTypes.ADD_USER:\n      {\n        const lastUserId = state.get('lastUserId');\n        const _ref = action,\n              payload = _ref.payload;\n        const user = payload.user;\n\n        if (user.get('name') === '') {\n          console.debug('no name!');\n          return state;\n        }\n\n        const userId = lastUserId + 1;\n        return state.withMutations(mutableState => {\n          mutableState.set('lastUserId', userId);\n          mutableState.setIn(['users', userId], user.set('id', userId));\n        });\n      }\n\n    case DefaultActionTypes.DELETE_USER:\n      {\n        const _ref2 = action,\n              payload = _ref2.payload;\n        const userId = payload.userId;\n        console.log('DELETE_USER', userId);\n        console.log('initialUsers', initialUsers);\n        return state.withMutations(mutableState => {\n          console.log('mutableState', mutableState);\n          const userToDelete = mutableState.get('id', userId);\n          console.log('mutableState', userToDelete);\n          return Map().set(List(userToDelete), 'listofone').remove(List(userToDelete));\n        });\n      }\n\n    case DefaultActionTypes.ADD_TODO:\n      {\n        // assignment of id\n        const lastTodoId = state.get('lastTodoId'); // parsing out the payload\n\n        const _ref3 = action,\n              payload = _ref3.payload; // more parsing out the payload\n\n        const userId = payload.userId,\n              todo = payload.todo; // validation before the action\n\n        if (todo.get('title') === '') {\n          console.debug('no title!');\n          return state;\n        } // increment the id for the new one\n\n\n        const todoId = lastTodoId + 1; // return the mutated state\n\n        return state.withMutations(mutableState => {\n          // set the new id to the todoId we set\n          mutableState.set('lastTodoId', todoId); // whats we are mutating\n\n          mutableState.setIn( // \n          ['todos', todoId], todo.withMutations(mutableTodo => {\n            mutableTodo.set('id', todoId);\n            mutableTodo.set('userId', userId);\n          }));\n        });\n      }\n\n    case DefaultActionTypes.DELETE_TODO:\n      {\n        const _ref4 = action,\n              payload = _ref4.payload;\n        const todoId = payload.todoId;\n        console.log('DELETE_USER', todoId);\n        return state;\n      }\n\n    default:\n      return state;\n  }\n};\nexport default reducer;","map":{"version":3,"sources":["/Users/m5/allied-technical-test-5/test-6/src/reducers/default.ts"],"names":["fromJS","Map","List","DefaultActionTypes","UserFactory","TodoFactory","initialUsers","id","name","initialTodos","userId","title","INITIAL_STATE","lastUserId","length","lastTodoId","users","withMutations","mutableMap","forEach","user","set","get","todos","todo","reducer","state","action","type","ADD_USER","payload","console","debug","mutableState","setIn","DELETE_USER","log","userToDelete","remove","ADD_TODO","todoId","mutableTodo","DELETE_TODO"],"mappings":"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","sourcesContent":["import {\n  fromJS,\n  Record,\n  Map,\n  List\n} from 'immutable';\nimport {\n  IAction,\n} from '../Interfaces';\n\nimport {\n  DefaultActionTypes,\n  ITodo,\n  AddTodoAction,\n  DeleteTodoAction,\n  IUser,\n  AddUserAction,\n  DeleteUserAction,\n  UserFactory,\n  TodoFactory,\n} from '../actions/default';\n\n// import {\n//   Settings,\n// } from '../../models';\n\nexport interface IReducerState {\n  lastUserId: number;\n  lastTodoId: number;\n  users: Map<number, Record<IUser>>;\n  todos: Map<number, Record<ITodo>>;\n}\n\nconst initialUsers = [\n  UserFactory({\n    id: 1,\n    name: 'Ryan',\n  }),\n  UserFactory({\n    id: 2,\n    name: 'Sandy',\n  }),\n  UserFactory({\n    id: 3,\n    name: 'Sean',\n  }),\n  UserFactory({\n    id: 4,\n    name: 'Peter',\n  }),\n]\n\nconst initialTodos = [\n  TodoFactory({\n    id: 1,\n    userId: 1,\n    title: 'Drink Water',\n  })\n]\nconst INITIAL_STATE = fromJS({\n  lastUserId: initialUsers.length,\n  lastTodoId: initialTodos.length,\n  users: Map<number, Record<IUser>>().withMutations((mutableMap) => {\n    initialUsers.forEach((user) => {\n      mutableMap.set(user.get('id'), user);\n    })\n  }),\n  todos: Map<number, Record<ITodo>>().withMutations((mutableMap) => {\n    initialTodos.forEach((todo) => {\n      mutableMap.set(todo.get('id'), todo);\n    })\n  }),\n});\n\nexport const reducer = (state: Record<IReducerState> = INITIAL_STATE, action: IAction) => {\n  switch (action.type) {\n\n    case DefaultActionTypes.ADD_USER: {\n      const lastUserId = state.get('lastUserId');\n      const {\n        payload,\n      } = action as AddUserAction;\n      const {\n        user,\n      } = payload;\n\n      if (user.get('name') === '') {\n        console.debug('no name!')\n        return state;\n      }\n\n      const userId = lastUserId + 1;\n      return state.withMutations((mutableState) => {\n        mutableState.set('lastUserId', userId);\n        mutableState.setIn(\n          ['users', userId],\n          user.set('id', userId),\n        );\n      })\n    }\n\n    case DefaultActionTypes.DELETE_USER: {\n      const {\n        payload,\n      } = action as DeleteUserAction;\n      const {\n        userId,\n      } = payload;\n      console.log('DELETE_USER', userId)\n      console.log('initialUsers', initialUsers)\n      return state.withMutations((mutableState) => {\n        console.log('mutableState', mutableState)\n        const userToDelete = mutableState.get('id', userId)\n        console.log('mutableState', userToDelete)\n        return Map().set(List(userToDelete), 'listofone').remove(List(userToDelete))\n      })\n    }\n\n    case DefaultActionTypes.ADD_TODO: {\n      // assignment of id\n      const lastTodoId = state.get('lastTodoId');\n\n      // parsing out the payload\n      const {\n       payload,\n      } = action as AddTodoAction;\n      // more parsing out the payload\n      const {\n       userId,\n       todo,\n      } = payload;\n\n      // validation before the action\n      if (todo.get('title') === '') {\n        console.debug('no title!')\n        return state;\n      }\n\n      // increment the id for the new one\n      const todoId = lastTodoId + 1;\n\n      // return the mutated state\n      return state.withMutations((mutableState) => {\n        // set the new id to the todoId we set\n        mutableState.set('lastTodoId', todoId);\n        // whats we are mutating\n        mutableState.setIn(\n          // \n          ['todos', todoId],\n          todo.withMutations((mutableTodo) => {\n            mutableTodo.set('id', todoId)\n            mutableTodo.set('userId', userId)\n          }),\n        );\n      });\n    }\n\n    case DefaultActionTypes.DELETE_TODO: {\n      const {\n        payload,\n      } = action as DeleteTodoAction;\n      const {\n        todoId\n      } = payload;\n      console.log('DELETE_USER', todoId)\n\n      return state\n    }\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;\n"]},"metadata":{},"sourceType":"module"}