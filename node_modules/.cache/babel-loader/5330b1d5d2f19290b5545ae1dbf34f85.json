{"ast":null,"code":"import _objectSpread from \"/Users/m5/allied-technical-test-5/test-6/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _slicedToArray from \"/Users/m5/allied-technical-test-5/test-6/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/m5/allied-technical-test-5/test-6/src/pages/TodoUser/index.tsx\";\nimport React, { useState } from 'react';\nimport { compose, bindActionCreators } from 'redux';\nimport { getIn } from 'immutable';\nimport { connect } from 'react-redux';\nimport { Grid, Typography, Button, TextField, Checkbox } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport CardActionArea from '@material-ui/core/CardActionArea';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport { AddTodoAction, DeleteTodoAction, CompletedTodoAction, AddSubTodoAction, TodoFactory, SubTodoFactory } from '../../actions/default';\nimport { makeSelectTodosForUser, makeSelectUser } from '../../selectors/default';\nimport { createStructuredSelector } from 'reselect';\n\nconst addTodo = (userId, todo) => new AddTodoAction({\n  userId,\n  todo\n});\n\nconst deleteTodo = todo => new DeleteTodoAction({\n  todo\n});\n\nconst completedTodo = (todo, complete) => new CompletedTodoAction({\n  todo,\n  complete\n});\n\nconst addSubTodo = (todo, subTodo) => new AddSubTodoAction({\n  todo,\n  subTodo\n});\n\nconst useStyles = makeStyles({\n  card: {\n    maxWidth: 345\n  }\n});\n\nconst Todo = props => {\n  const classes = useStyles();\n\n  const _useState = useState(''),\n        _useState2 = _slicedToArray(_useState, 2),\n        textInput = _useState2[0],\n        setTextInput = _useState2[1];\n\n  const _useState3 = useState(false),\n        _useState4 = _slicedToArray(_useState3, 2),\n        toggleAddInput = _useState4[0],\n        setToggleAddInput = _useState4[1];\n\n  const addTodo = props.addTodo,\n        deleteTodo = props.deleteTodo,\n        completedTodo = props.completedTodo,\n        addSubTodo = props.addSubTodo,\n        userId = props.userId,\n        todosForUser = props.todosForUser,\n        user = props.user;\n  console.log('TodoUser', props);\n  let todo = [];\n\n  if (user == null) {\n    return React.createElement(Grid, {\n      container: true,\n      direction: \"column\",\n      wrap: \"nowrap\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      item: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95\n      },\n      __self: this\n    }, React.createElement(Typography, {\n      variant: \"h5\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    }, \"INVALID USER\")));\n  }\n\n  return React.createElement(Grid, {\n    container: true,\n    direction: \"column\",\n    wrap: \"nowrap\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108\n    },\n    __self: this\n  }, React.createElement(Grid, {\n    item: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113\n    },\n    __self: this\n  }, React.createElement(Typography, {\n    variant: \"h5\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116\n    },\n    __self: this\n  }, \"TODOS FOR \", user.get('name'))), React.createElement(Grid, {\n    container: true,\n    item: true,\n    direction: \"column\",\n    wrap: \"nowrap\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122\n    },\n    __self: this\n  }, !toggleAddInput ? React.createElement(Grid, {\n    item: true,\n    container: true,\n    alignItems: \"center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129\n    },\n    __self: this\n  }, React.createElement(Grid, {\n    item: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134\n    },\n    __self: this\n  }, React.createElement(TextField, {\n    label: \"title\",\n    value: textInput,\n    onChange: e => {\n      setTextInput(e.target.value);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137\n    },\n    __self: this\n  })), React.createElement(Grid, {\n    item: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145\n    },\n    __self: this\n  }, React.createElement(Button, {\n    variant: \"outlined\",\n    onClick: () => {\n      addTodo(userId, TodoFactory({\n        title: textInput\n      }));\n      setTextInput('');\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148\n    },\n    __self: this\n  }, \"Input Todo\"))) : React.createElement(Grid, {\n    item: true,\n    container: true,\n    alignItems: \"center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168\n    },\n    __self: this\n  }, React.createElement(Grid, {\n    item: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 173\n    },\n    __self: this\n  }, React.createElement(TextField, {\n    label: \"title\",\n    value: textInput,\n    onChange: e => {\n      setTextInput(e.target.value);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 176\n    },\n    __self: this\n  })), React.createElement(Grid, {\n    item: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 184\n    },\n    __self: this\n  }, React.createElement(Button, {\n    variant: \"outlined\",\n    onClick: () => {\n      addSubTodo(todo, SubTodoFactory({\n        title: textInput\n      }));\n      setTextInput('');\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 187\n    },\n    __self: this\n  }, \"Input Sub Task\"))), todosForUser.map((todo, index) => {\n    let complete = todo.get('complete');\n    return React.createElement(Card, {\n      className: classes.card,\n      key: index,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 210\n      },\n      __self: this\n    }, React.createElement(CardActionArea, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 211\n      },\n      __self: this\n    }, React.createElement(Checkbox, {\n      checked: complete,\n      value: complete,\n      onChange: () => completedTodo(todo, complete),\n      inputProps: {\n        'aria-label': 'primary checkbox'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 212\n      },\n      __self: this\n    }), React.createElement(CardContent, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 220\n      },\n      __self: this\n    }, React.createElement(Typography, {\n      variant: \"body2\",\n      color: \"textSecondary\",\n      component: \"p\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 222\n      },\n      __self: this\n    }, todo.get('title')))), React.createElement(CardActions, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 227\n      },\n      __self: this\n    }, React.createElement(Button, {\n      size: \"small\",\n      color: \"primary\" //@ts-ignore   \n      ,\n      onClick: () => deleteTodo(todo),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 228\n      },\n      __self: this\n    }, \"Delete\"), React.createElement(Button, {\n      size: \"small\",\n      color: \"primary\",\n      onClick: () => setToggleAddInput(!toggleAddInput),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 236\n      },\n      __self: this\n    }, !toggleAddInput ? \"Add SubTodo\" : \"Add New Task\")));\n  })));\n};\n\nconst mapStateToProps = (state, props) => {\n  const match = props.match;\n  const userId = parseInt(getIn(match, ['params', 'userId'], -1), 10); // from path / router\n\n  return _objectSpread({\n    userId\n  }, createStructuredSelector({\n    todosForUser: makeSelectTodosForUser(userId),\n    user: makeSelectUser(userId)\n  })(state));\n};\n\nconst mapDispatchToProps = dispatch => {\n  return _objectSpread({}, bindActionCreators({\n    addTodo,\n    deleteTodo,\n    completedTodo,\n    addSubTodo\n  }, dispatch));\n};\n\nexport default compose(connect(mapStateToProps, mapDispatchToProps))(Todo);","map":{"version":3,"sources":["/Users/m5/allied-technical-test-5/test-6/src/pages/TodoUser/index.tsx"],"names":["React","useState","compose","bindActionCreators","getIn","connect","Grid","Typography","Button","TextField","Checkbox","makeStyles","Card","CardActionArea","CardActions","CardContent","AddTodoAction","DeleteTodoAction","CompletedTodoAction","AddSubTodoAction","TodoFactory","SubTodoFactory","makeSelectTodosForUser","makeSelectUser","createStructuredSelector","addTodo","userId","todo","deleteTodo","completedTodo","complete","addSubTodo","subTodo","useStyles","card","maxWidth","Todo","props","classes","textInput","setTextInput","toggleAddInput","setToggleAddInput","todosForUser","user","console","log","get","e","target","value","title","map","index","mapStateToProps","state","match","parseInt","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport {\n  compose,\n  bindActionCreators,\n  AnyAction,\n  Dispatch,\n} from 'redux';\nimport { IMatch } from '../../Interfaces';\nimport {\n  getIn,\n  Record,\n  List,\n} from 'immutable';\nimport { connect } from 'react-redux';\nimport {\n  Grid,\n  Typography,\n  Button,\n  TextField,\n  Checkbox\n} from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport CardActionArea from '@material-ui/core/CardActionArea';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport {\n  AddTodoAction,\n  DeleteTodoAction,\n  CompletedTodoAction,\n  AddSubTodoAction,\n  ITodo,\n  ISubTodo,\n  TodoFactory,\n  SubTodoFactory,\n  IUser,\n} from '../../actions/default';\nimport {\n  makeSelectTodosForUser,\n  makeSelectUser,\n} from '../../selectors/default';\nimport { createStructuredSelector } from 'reselect';\n\ninterface ITodoComponentProps {\n  match: IMatch,\n}\n\ninterface ITodoProps extends ITodoComponentProps {\n  addTodo: (userId: number, todo: Record<ITodo>) => void;\n  addTodoSubTodo: (todo: Record<ITodo>) => void;\n  deleteTodo: (todoId: number) => void;\n  completedTodo: (todo: Record<ITodo>, complete: boolean) => void;\n  addSubTodo: (todo: Record<ITodo>, subTodo: Record<ISubTodo>) => void;\n  userId: number;\n  todoId: number;\n  todosForUser: List<Record<ITodo>>;\n  user?: Record<IUser>;\n}\n\nconst addTodo = (userId: number, todo: Record<ITodo>) => new AddTodoAction({ userId, todo });\nconst deleteTodo = (todo: Record<ITodo>) => new DeleteTodoAction({ todo });\nconst completedTodo = (todo: Record<ITodo>, complete: boolean) => new CompletedTodoAction({ todo, complete });\nconst addSubTodo = (todo: Record<ITodo>, subTodo: Record<ISubTodo>) => new AddSubTodoAction({ todo, subTodo });\n\nconst useStyles = makeStyles({\n  card: {\n    maxWidth: 345,\n  },\n});\n\nconst Todo: React.FC<ITodoProps> = (props) => {\n  const classes = useStyles();\n  const [textInput, setTextInput] = useState('');\n  const [toggleAddInput, setToggleAddInput] = useState(false);\n  const {\n    addTodo,\n    deleteTodo,\n    completedTodo,\n    addSubTodo,\n    userId,\n    todosForUser,\n    user,\n \n  } = props;\n\n  console.log('TodoUser', props)\n  let todo = []\n  if (user == null) {\n    return (\n      <Grid\n        container={true}\n        direction='column'\n        wrap='nowrap'\n      >\n        <Grid\n          item={true}\n        >\n          <Typography\n            variant='h5'\n          >\n            INVALID USER\n          </Typography>\n        </Grid>\n      </Grid>\n    );\n  }\n  return (\n    <Grid\n      container={true}\n      direction='column'\n      wrap='nowrap'\n    >\n      <Grid\n        item={true}\n      >\n        <Typography\n          variant='h5'\n        >\n          TODOS FOR {user.get('name')}\n        </Typography>\n      </Grid>\n      <Grid\n        container={true}\n        item={true}\n        direction='column'\n        wrap='nowrap'\n      >\n      { !toggleAddInput ?\n        <Grid\n          item={true}\n          container={true}\n          alignItems='center'\n        >\n          <Grid\n            item={true}\n          >\n            <TextField\n              label='title'\n              value={textInput}\n              onChange={(e) => {\n                setTextInput(e.target.value);\n              }}\n            />\n          </Grid>\n          <Grid\n            item={true}\n          >\n            <Button\n              variant='outlined'\n              onClick={\n                () => {\n                  addTodo(\n                    userId,\n                    TodoFactory({\n                      title: textInput,\n                    }),\n                  );\n                  setTextInput('');\n                }\n              }\n            >\n              Input Todo\n            </Button>\n          </Grid>\n  \n        </Grid>\n      :  \n        <Grid\n          item={true}\n          container={true}\n          alignItems='center'\n        >\n          <Grid\n            item={true}\n          >\n            <TextField\n              label='title'\n              value={textInput}\n              onChange={(e) => {\n                setTextInput(e.target.value);\n              }}\n            />\n          </Grid>\n          <Grid\n            item={true}\n          >\n            <Button\n              variant='outlined'\n              onClick={\n                () => {\n                  addSubTodo(\n                    todo,\n                    SubTodoFactory({\n                      title: textInput,\n                    }),\n                  );\n                  setTextInput('');\n                }\n              }\n            >\n              Input Sub Task\n            </Button>\n          </Grid>\n          \n        </Grid>}\n        {\n          todosForUser.map((todo, index) => {\n            let complete = todo.get('complete')\n            return (\n              <Card className={classes.card} key={index}>\n                <CardActionArea>\n                <Checkbox\n                  checked={complete}\n                  value={complete}\n                  onChange={() => completedTodo(todo, complete)}\n                  inputProps={{\n                    'aria-label': 'primary checkbox',\n                  }}\n                />\n                  <CardContent>\n\n                    <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\n                    {todo.get('title')}\n                    </Typography>\n                  </CardContent>\n                </CardActionArea>\n                <CardActions>\n                  <Button \n                    size=\"small\" \n                    color=\"primary\" \n                    //@ts-ignore   \n                    onClick={() => deleteTodo(todo)}\n                  >\n                    Delete\n                  </Button>\n                  <Button \n                    size=\"small\" \n                    color=\"primary\" \n                    onClick={() => setToggleAddInput(!toggleAddInput)}\n                  >\n                    {!toggleAddInput ? \"Add SubTodo\" : \"Add New Task\" }\n                  </Button>\n                </CardActions>\n              </Card>\n            )\n          })\n        }\n      </Grid>\n    </Grid>\n  );\n}\n\nconst mapStateToProps = (state: any, props: ITodoComponentProps) => {\n  const {\n    match,\n  } = props;\n  const userId = parseInt(getIn(match, ['params', 'userId'], -1), 10); // from path / router\n  return {\n    userId,\n    ...createStructuredSelector({\n      todosForUser: makeSelectTodosForUser(userId),\n      user: makeSelectUser(userId),\n    })(state)\n  }\n};\n\nconst mapDispatchToProps = (dispatch: Dispatch<AnyAction>) => {\n  return {\n    ...bindActionCreators({ addTodo, deleteTodo, completedTodo, addSubTodo }, dispatch)\n  };\n};\n\n\nexport default compose<React.ComponentClass<ITodoComponentProps>>(\n  connect(mapStateToProps, mapDispatchToProps)\n)(Todo);"]},"metadata":{},"sourceType":"module"}